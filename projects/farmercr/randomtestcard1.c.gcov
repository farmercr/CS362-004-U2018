        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************************
        -:    2:* Program Name:	Assignment-4
        -:    3:* Author:			Craig Farmer
        -:    4:* Course:			CS 362 - 400, Summer 2018
        -:    5:* Date Created:	08/04/2018
        -:    6:* Last Modified:	08/05/2018
        -:    7:* Due Date:			08/05/2018
        -:    8:* File name:		randomtestcard2.c
        -:    9:* Description: A random test for Village card function.
        -:   10:* Websites consulted:
        -:   11:*	https://www.gnu.org/software/make/manual/make.html
        -:   12:******************************************************************************/
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include "rngs.h"
        -:   17:#include <stdio.h>
        -:   18:#include <string.h>
        -:   19:#include <stdlib.h>
        -:   20:#include <time.h>
        -:   21:#include <math.h>
        -:   22:
        -:   23:#define TESTCARD "Village"
        -:   24:#define RED_TEXT "\x1b[31m"
        -:   25:#define GREEN_TEXT "\x1b[32m"
        -:   26:#define RESET_TEXT "\x1b[0m"
        -:   27:#define MIN 3
        -:   28:#define ITERATIONS 10000
        -:   29:
        -:   30:int failedCardEffect = 0;
        -:   31:int failedShuffle = 0;
        -:   32:int failedCardDraw = 0;
        -:   33:int failedHandCount = 0;
        -:   34:int failedDeckCount = 0;
        -:   35:int failedDiscardCount = 0;
        -:   36:int failedTreasureCount = 0;
        -:   37:int failedActionCount = 0;
        -:   38:
    60000:   39:void assertResult(int expected1, int actual1, int expected2, int actual2, int caseType)
        -:   40:{
        -:   41:
    60000:   42:	switch (caseType)
        -:   43:	{
        -:   44:	case 1: //"Card Effect":
    10000:   45:		if (expected1 != actual1)
        -:   46:		{
    #####:   47:			failedCardEffect++;
        -:   48:		}
    10000:   49:		break;
        -:   50:	case 2: //"Shuffle":
    #####:   51:		if (expected1 == actual1 && expected2 <= actual2)
        -:   52:		{
    #####:   53:			failedShuffle++;
        -:   54:		}
    #####:   55:		break;
        -:   56:	case 3: //"Draw Card":
    10000:   57:		if (expected1 == actual1 && expected2 != actual2)
        -:   58:		{
    #####:   59:			failedCardDraw++;
        -:   60:		}
    10000:   61:		break;
        -:   62:	case 4: //"Treasure Count":
    #####:   63:		if (expected1 != actual1)
        -:   64:		{
    #####:   65:			failedTreasureCount++;
        -:   66:		}
    #####:   67:		break;
        -:   68:	case 5: //"Hand Count":
    10000:   69:		if (expected1 != actual1)
        -:   70:		{
    #####:   71:			failedHandCount++;
        -:   72:		}
    10000:   73:		break;
        -:   74:	case 6: //"Deck Count":
    10000:   75:		if (expected1 != actual1)
        -:   76:		{
    #####:   77:			failedDeckCount++;
        -:   78:		}
    10000:   79:		break;
        -:   80:	case 7: //"Discard Count":
    10000:   81:		if (expected1 != actual1)
        -:   82:		{
    #####:   83:			failedDiscardCount++;
        -:   84:		}
    10000:   85:		break;
        -:   86:	case 8: //"Action Count":
    10000:   87:		if (expected1 != actual1)
        -:   88:		{
    #####:   89:			failedActionCount++;
        -:   90:		}
    10000:   91:		break;
        -:   92:	default:
    #####:   93:		break;
        -:   94:	}
    60000:   95:}
        -:   96:
    10000:   97:void randomTestCard(int player, struct gameState *testGame)
        -:   98:{
        -:   99:	int drawCardResult;
    10000:  100:	int bonus = 0;
        -:  101:	int cardEffectResult;
        -:  102:
        -:  103:	struct gameState startGame;
        -:  104:	// copy the gameState to maintain a starting state for a baseline
    10000:  105:	memcpy(&startGame, testGame, sizeof(struct gameState));
        -:  106:
    10000:  107:	cardEffectResult = cardEffect(village, 0, 0, 0, testGame, 0, &bonus);
    10000:  108:	assertResult(0, cardEffectResult, 0, 0, 1);
        -:  109:
    10000:  110:	drawCardResult = drawCard(player, &startGame);
    10000:  111:	assertResult(-1, drawCardResult, 0, startGame.deckCount[player], 3);
        -:  112:
    10000:  113:	startGame.numActions += 2;
    10000:  114:	assertResult(startGame.numActions, testGame->numActions, 0, 0, 8);
        -:  115:
    10000:  116:	discardCard(0, player, &startGame, 0);
    10000:  117:	assertResult(startGame.discardCount[player], testGame->discardCount[player], 0, 0, 7);
        -:  118:
    10000:  119:	assertResult(startGame.handCount[player], testGame->handCount[player], 0, 0, 5);
    10000:  120:	assertResult(startGame.deckCount[player], testGame->deckCount[player], 0, 0, 6);
    10000:  121:}
        -:  122:
        1:  123:int main()
        -:  124:{
        -:  125:	struct gameState testGame;
        1:  126:	int iterationCounter = 0;
        -:  127:	int counter;
        -:  128:	int player;
        -:  129:	int fails;
        -:  130:	int failCount;
        -:  131:	int passCount;
        1:  132:	srand(time(NULL));
        -:  133:
        1:  134:	printf("\n\n----- Starting Random Testing of %s Card -----\n\n", TESTCARD);
        1:  135:	printf("   Running test for %d iterations\n", ITERATIONS);
        -:  136:
    10002:  137:	while (iterationCounter < ITERATIONS)
        -:  138:	{
263010000:  139:		for (counter = 0; counter < sizeof(struct gameState); counter++)
        -:  140:		{
263000000:  141:			((char*)&testGame)[counter] = floor(Random() * 256);
        -:  142:		}
        -:  143:
    10000:  144:		player = floor(Random() * MAX_PLAYERS);
    10000:  145:		testGame.deckCount[player] = floor(Random() * MAX_DECK);
    10000:  146:		testGame.playedCardCount = floor(Random() * (MAX_DECK - 1));
    10000:  147:		testGame.discardCount[player] = floor(Random() * MAX_DECK);
    10000:  148:		testGame.handCount[player] = floor(Random() * MAX_DECK);
    10000:  149:		testGame.whoseTurn = player;
        -:  150:
    10000:  151:		randomTestCard(player, &testGame);
        -:  152:
    10000:  153:		iterationCounter++;
        -:  154:	}
        -:  155:
        1:  156:	fails = failedCardEffect + failedShuffle + failedCardDraw + failedHandCount + failedDeckCount + failedDiscardCount + failedTreasureCount + failedActionCount;
        -:  157:
        1:  158:	if (ITERATIONS - fails <= 0)
        -:  159:	{
    #####:  160:		passCount = 0;
    #####:  161:		failCount = ITERATIONS;
        -:  162:	}
        -:  163:	else
        -:  164:	{
        1:  165:		passCount = ITERATIONS - fails;
        1:  166:		failCount = fails;
        -:  167:	}
        -:  168:
        1:  169:	printf("   Results of random tests\n");
        1:  170:	printf("   -----------------------\n");
        1:  171:	printf(GREEN_TEXT "      PASSED: %d\n" RESET_TEXT, passCount);
        1:  172:	printf(RED_TEXT "      FAILED: %d\n" RESET_TEXT, failCount);
        1:  173:	printf("   =======================\n");
        -:  174:
        1:  175:	if (fails == 0)
        -:  176:	{
        1:  177:		printf(GREEN_TEXT "      ALL TESTS PASSED\n" RESET_TEXT);
        -:  178:	}
        -:  179:	else
        -:  180:	{
    #####:  181:		printf(RED_TEXT "      FAILURES\n" RESET_TEXT);
    #####:  182:		printf("     cardEffect(): %d\n", failedCardEffect);
    #####:  183:		printf("        shuffle(): %d\n", failedShuffle);
    #####:  184:		printf("       drawCard(): %d\n", failedCardDraw);
    #####:  185:		printf("       hand count: %d\n", failedHandCount);
    #####:  186:		printf("       deck count: %d\n", failedDeckCount);
    #####:  187:		printf("    discard count: %d\n", failedDiscardCount);
    #####:  188:		printf("   treasure count: %d\n", failedTreasureCount);
    #####:  189:		printf("     action count: %d\n", failedActionCount);
        -:  190:	}
        1:  191:	printf("\n----- %s Card Random Testing Complete -----\n\n", TESTCARD);
        -:  192:}
