        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************************
        -:    2:* Program Name:	Assignment-4
        -:    3:* Author:			Craig Farmer
        -:    4:* Course:			CS 362 - 400, Summer 2018
        -:    5:* Date Created:	08/04/2018
        -:    6:* Last Modified:	08/05/2018
        -:    7:* Due Date:			08/05/2018
        -:    8:* File name:		randomtestcard2.c
        -:    9:* Description: A random test for Smithy card function.
        -:   10:* Websites consulted:
        -:   11:*	https://www.gnu.org/software/make/manual/make.html
        -:   12:******************************************************************************/
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include "rngs.h"
        -:   17:#include <stdio.h>
        -:   18:#include <string.h>
        -:   19:#include <stdlib.h>
        -:   20:#include <time.h>
        -:   21:#include <math.h>
        -:   22:
        -:   23:#define TESTCARD "Smithy"
        -:   24:#define RED_TEXT "\x1b[31m"
        -:   25:#define GREEN_TEXT "\x1b[32m"
        -:   26:#define RESET_TEXT "\x1b[0m"
        -:   27:#define MIN 3
        -:   28:#define ITERATIONS 10000
        -:   29:
        -:   30:int failedCardEffect = 0;
        -:   31:int failedShuffle = 0;
        -:   32:int failedCardDraw = 0;
        -:   33:int failedHandCount = 0;
        -:   34:int failedDeckCount = 0;
        -:   35:int failedDiscardCount = 0;
        -:   36:int failedTreasureCount = 0;
        -:   37:
    70000:   38:void assertResult(int expected1, int actual1, int expected2, int actual2, int caseType)
        -:   39:{
        -:   40:
    70000:   41:	switch (caseType)
        -:   42:	{
        -:   43:	case 1: //"Card Effect":
    10000:   44:		if (expected1 != actual1)
        -:   45:		{
    #####:   46:			failedCardEffect++;
        -:   47:		}
    10000:   48:		break;
        -:   49:	case 2: //"Shuffle":
    #####:   50:		if (expected1 == actual1 && expected2 <= actual2)
        -:   51:		{
    #####:   52:			failedShuffle++;
        -:   53:		}
    #####:   54:		break;
        -:   55:	case 3: //"Draw Card":
    30000:   56:		if (expected1 == actual1 && expected2 != actual2)
        -:   57:		{
    #####:   58:			failedCardDraw++;
        -:   59:		}
    30000:   60:		break;
        -:   61:	case 4: //"Treasure Count":
    #####:   62:		if (expected1 != actual1)
        -:   63:		{
    #####:   64:			failedTreasureCount++;
        -:   65:		}
    #####:   66:		break;
        -:   67:	case 5: //"Hand Count":
    10000:   68:		if (expected1 != actual1)
        -:   69:		{
     9999:   70:			failedHandCount++;
        -:   71:		}
    10000:   72:		break;
        -:   73:	case 6: //"Deck Count":
    10000:   74:		if (expected1 != actual1)
        -:   75:		{
     9999:   76:			failedDeckCount++;
        -:   77:		}
    10000:   78:		break;
        -:   79:	case 7: //"Discard Count":
    10000:   80:		if (expected1 != actual1)
        -:   81:		{
       18:   82:			failedDiscardCount++;
        -:   83:		}
    10000:   84:		break;
        -:   85:	default:
    #####:   86:		break;
        -:   87:	}
    70000:   88:}
        -:   89:
    10000:   90:void randomTestCard(int player, struct gameState *testGame)
        -:   91:{
        -:   92:	int drawCardResult1;
        -:   93:	int drawCardResult2;
        -:   94:	int drawCardResult3;
    10000:   95:	int bonus = 0;
        -:   96:	int cardEffectResult;
        -:   97:	
        -:   98:	struct gameState startGame;
        -:   99:	// copy the gameState to maintain a starting state for a baseline
    10000:  100:	memcpy(&startGame, testGame, sizeof(struct gameState));
        -:  101:
    10000:  102:	cardEffectResult = cardEffect(smithy, 0, 0, 0, testGame, 0, &bonus);
    10000:  103:	assertResult(0, cardEffectResult, 0, 0, 1);
        -:  104:
    10000:  105:	drawCardResult1 = drawCard(player, &startGame);
    10000:  106:	assertResult(-1, drawCardResult1, 0, startGame.deckCount[player], 3);
        -:  107:
    10000:  108:	drawCardResult2 = drawCard(player, &startGame);
    10000:  109:	assertResult(-1, drawCardResult2, 0, startGame.deckCount[player], 3);
        -:  110:	
    10000:  111:	drawCardResult3 = drawCard(player, &startGame);
    10000:  112:	assertResult(-1, drawCardResult3, 0, startGame.deckCount[player], 3);
        -:  113:
    10000:  114:	discardCard(0, player, &startGame, 0);
    10000:  115:	assertResult(startGame.discardCount[player], testGame->discardCount[player], 0, 0, 7);
        -:  116:
    10000:  117:	assertResult(startGame.handCount[player], testGame->handCount[player], 0, 0, 5);
    10000:  118:	assertResult(startGame.deckCount[player], testGame->deckCount[player], 0, 0, 6);
    10000:  119:}
        -:  120:
        1:  121:int main()
        -:  122:{
        -:  123:	struct gameState testGame;
        1:  124:	int iterationCounter = 0;
        -:  125:	int counter;
        -:  126:	int player;
        -:  127:	int fails;
        -:  128:	int failCount;
        -:  129:	int passCount;
        1:  130:	srand(time(NULL));
        -:  131:
        1:  132:	printf("\n\n----- Starting Random Testing of %s Card -----\n\n", TESTCARD);
        1:  133:	printf("   Running test for %d iterations\n", ITERATIONS);
        -:  134:
    10002:  135:	while (iterationCounter < ITERATIONS)
        -:  136:	{
263010000:  137:		for (counter = 0; counter < sizeof(struct gameState); counter++)
        -:  138:		{
263000000:  139:			((char*)&testGame)[counter] = floor(Random() * 256);
        -:  140:		}
        -:  141:		
    10000:  142:		player = floor(Random() * MAX_PLAYERS);
    10000:  143:		testGame.deckCount[player] = floor(Random() * MAX_DECK);
    10000:  144:		testGame.playedCardCount = floor(Random() * (MAX_DECK - 1));
    10000:  145:		testGame.discardCount[player] = floor(Random() * MAX_DECK);
    10000:  146:		testGame.handCount[player] = floor(Random() * MAX_DECK);
    10000:  147:		testGame.whoseTurn = player;
        -:  148:
    10000:  149:		randomTestCard(player, &testGame);
        -:  150:
    10000:  151:		iterationCounter++;
        -:  152:	}
        -:  153:
        1:  154:	fails = failedCardEffect + failedShuffle + failedCardDraw + failedHandCount + failedDeckCount + failedDiscardCount + failedTreasureCount;
        -:  155:
        1:  156:	if (ITERATIONS - fails <= 0)
        -:  157:	{
        1:  158:		passCount = 0;
        1:  159:		failCount = ITERATIONS;
        -:  160:	}
        -:  161:	else
        -:  162:	{
    #####:  163:		passCount = ITERATIONS - fails;
    #####:  164:		failCount = fails;
        -:  165:	}
        -:  166:
        1:  167:	printf("   Results of random tests\n");
        1:  168:	printf("   -----------------------\n");
        1:  169:	printf(GREEN_TEXT "      PASSED: %d\n" RESET_TEXT, passCount);
        1:  170:	printf(RED_TEXT "      FAILED: %d\n" RESET_TEXT, failCount);
        1:  171:	printf("   =======================\n");
        -:  172:
        1:  173:	if (fails == 0)
        -:  174:	{
    #####:  175:		printf(GREEN_TEXT "      ALL TESTS PASSED\n" RESET_TEXT);
        -:  176:	}
        -:  177:	else
        -:  178:	{
        1:  179:		printf(RED_TEXT "      FAILURES\n" RESET_TEXT);
        1:  180:		printf("     cardEffect(): %d\n", failedCardEffect);
        1:  181:		printf("        shuffle(): %d\n", failedShuffle);
        1:  182:		printf("       drawCard(): %d\n", failedCardDraw);
        1:  183:		printf("       hand count: %d\n", failedHandCount);
        1:  184:		printf("       deck count: %d\n", failedDeckCount);
        1:  185:		printf("    discard count: %d\n", failedDiscardCount);
        1:  186:		printf("   treasure count: %d\n", failedTreasureCount);
        -:  187:	}
        1:  188:	printf("\n----- %s Card Random Testing Complete -----\n\n", TESTCARD);
        -:  189:}
