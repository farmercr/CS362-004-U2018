

----- Starting Random Testing of Village Card -----

   Running test for 10000 iterations
   Results of random tests
   -----------------------
[32m      PASSED: 0
[0m[31m      FAILED: 10000
[0m   =======================
[31m      FAILURES
[0m     cardEffect(): 0
        shuffle(): 0
       drawCard(): 0
       hand count: 0
       deck count: 0
    discard count: 0
   treasure count: 0
     action count: 10000

----- Village Card Random Testing Complete -----

File 'randomtestcard1.c'
Lines executed:81.48% of 81
Creating 'randomtestcard1.c.gcov'

File '<built-in>'
No executable lines
Removing '<built-in>.gcov'

File 'dominion.c'
Lines executed:12.43% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    52184:    8:int compare(const void* a, const void* b) {
    52184:    9:	if (*(int*)a > *(int*)b)
    26684:   10:		return 1;
    25500:   11:	if (*(int*)a < *(int*)b)
    25500:   12:		return -1;
    #####:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:	int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:	struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;
        -:   43:	//set up random number generator
    #####:   44:	SelectStream(1);
    #####:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
    #####:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
    #####:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
    #####:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
    #####:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
    #####:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
    #####:   73:	if (numPlayers == 2)
        -:   74:	{
    #####:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
    #####:   87:	if (numPlayers == 2)
        -:   88:	{
    #####:   89:		state->supplyCount[estate] = 8;
    #####:   90:		state->supplyCount[duchy] = 8;
    #####:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
    #####:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:	state->supplyCount[silver] = 40;
    #####:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
    #####:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
    #####:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
    #####:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
    #####:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
    #####:  115:					if (numPlayers == 2) {
    #####:  116:						state->supplyCount[i] = 8;
        -:  117:					}
    #####:  118:					else { state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
    #####:  122:					state->supplyCount[i] = 10;
        -:  123:				}
    #####:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
    #####:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
    #####:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
    #####:  140:		state->deckCount[i] = 0;
    #####:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
    #####:  143:			state->deck[i][j] = estate;
    #####:  144:			state->deckCount[i]++;
        -:  145:		}
    #####:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
    #####:  148:			state->deck[i][j] = copper;
    #####:  149:			state->deckCount[i]++;
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
    #####:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
    #####:  156:		if (shuffle(i, state) < 0)
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
    #####:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{
        -:  165:		//initialize hand size to zero
    #####:  166:		state->handCount[i] = 0;
    #####:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
    #####:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
    #####:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
    #####:  182:	state->outpostPlayed = 0;
    #####:  183:	state->phase = 0;
    #####:  184:	state->numActions = 1;
    #####:  185:	state->numBuys = 1;
    #####:  186:	state->playedCardCount = 0;
    #####:  187:	state->whoseTurn = 0;
    #####:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
    #####:  192:	for (it = 0; it < 5; it++) {
    #####:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
    #####:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:	return 0;
        -:  199:}
        -:  200:
       32:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
       32:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
       32:  209:	if (state->deckCount[player] < 1)
    #####:  210:		return -1;
       32:  211:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     7654:  214:	while (state->deckCount[player] > 0) {
     7590:  215:		card = floor(Random() * state->deckCount[player]);
     7590:  216:		newDeck[newDeckPos] = state->deck[player][card];
     7590:  217:		newDeckPos++;
   577457:  218:		for (i = card; i < state->deckCount[player] - 1; i++) {
   569867:  219:			state->deck[player][i] = state->deck[player][i + 1];
        -:  220:		}
     7590:  221:		state->deckCount[player]--;
        -:  222:	}
     7622:  223:	for (i = 0; i < newDeckPos; i++) {
     7590:  224:		state->deck[player][i] = newDeck[i];
     7590:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
       32:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:									//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if (state->numActions < 1)
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if (card < adventurer || card > treasure_map)
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG) {
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1) {
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
        -:  286:	}
    #####:  287:	else if (supplyCount(supplyPos, state) <1) {
        -:  288:		if (DEBUG)
        -:  289:			printf("There are not any of that type of card left\n");
    #####:  290:		return -1;
        -:  291:	}
    #####:  292:	else if (state->coins < getCost(supplyPos)) {
        -:  293:		if (DEBUG)
        -:  294:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:		return -1;
        -:  296:	}
        -:  297:	else {
    #####:  298:		state->phase = 1;
        -:  299:		//state->supplyCount[supplyPos]--;
    #####:  300:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:
    #####:  302:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:		state->numBuys--;
        -:  304:		if (DEBUG)
        -:  305:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:	}
        -:  307:
        -:  308:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:	//state->discardCount[who]++;
        -:  310:
    #####:  311:	return 0;
        -:  312:}
        -:  313:
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:	return state->handCount[whoseTurn(state)];
        -:  316:}
        -:  317:
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:	int currentPlayer = whoseTurn(state);
    #####:  320:	return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
    #####:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:	return state->supplyCount[card];
        -:  325:}
        -:  326:
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:	int i;
    #####:  329:	int count = 0;
        -:  330:
    #####:  331:	for (i = 0; i < state->deckCount[player]; i++)
        -:  332:	{
    #####:  333:		if (state->deck[player][i] == card) count++;
        -:  334:	}
        -:  335:
    #####:  336:	for (i = 0; i < state->handCount[player]; i++)
        -:  337:	{
    #####:  338:		if (state->hand[player][i] == card) count++;
        -:  339:	}
        -:  340:
    #####:  341:	for (i = 0; i < state->discardCount[player]; i++)
        -:  342:	{
    #####:  343:		if (state->discard[player][i] == card) count++;
        -:  344:	}
        -:  345:
    #####:  346:	return count;
        -:  347:}
        -:  348:
    10000:  349:int whoseTurn(struct gameState *state) {
    10000:  350:	return state->whoseTurn;
        -:  351:}
        -:  352:
    #####:  353:int endTurn(struct gameState *state) {
        -:  354:	int k;
        -:  355:	int i;
    #####:  356:	int currentPlayer = whoseTurn(state);
        -:  357:
        -:  358:	//Discard hand
    #####:  359:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  360:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:	}
    #####:  363:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:
        -:  365:													//Code for determining the player
    #####:  366:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  367:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:	}
        -:  369:	else {
    #####:  370:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:	}
        -:  372:
    #####:  373:	state->outpostPlayed = 0;
    #####:  374:	state->phase = 0;
    #####:  375:	state->numActions = 1;
    #####:  376:	state->coins = 0;
    #####:  377:	state->numBuys = 1;
    #####:  378:	state->playedCardCount = 0;
    #####:  379:	state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:	//int k; move to top
        -:  382:	//Next player draws hand
    #####:  383:	for (k = 0; k < 5; k++) {
    #####:  384:		drawCard(state->whoseTurn, state);//Draw a card
        -:  385:	}
        -:  386:
        -:  387:	//Update money
    #####:  388:	updateCoins(state->whoseTurn, state, 0);
        -:  389:
    #####:  390:	return 0;
        -:  391:}
        -:  392:
    #####:  393:int isGameOver(struct gameState *state) {
        -:  394:	int i;
        -:  395:	int j;
        -:  396:
        -:  397:	//if stack of Province cards is empty, the game ends
    #####:  398:	if (state->supplyCount[province] == 0)
        -:  399:	{
    #####:  400:		return 1;
        -:  401:	}
        -:  402:
        -:  403:	//if three supply pile are at 0, the game ends
    #####:  404:	j = 0;
    #####:  405:	for (i = 0; i < 25; i++)
        -:  406:	{
    #####:  407:		if (state->supplyCount[i] == 0)
        -:  408:		{
    #####:  409:			j++;
        -:  410:		}
        -:  411:	}
    #####:  412:	if (j >= 3)
        -:  413:	{
    #####:  414:		return 1;
        -:  415:	}
        -:  416:
    #####:  417:	return 0;
        -:  418:}
        -:  419:
    #####:  420:int scoreFor(int player, struct gameState *state) {
        -:  421:
        -:  422:	int i;
    #####:  423:	int score = 0;
        -:  424:	//score from hand
    #####:  425:	for (i = 0; i < state->handCount[player]; i++)
        -:  426:	{
    #####:  427:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  428:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  430:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  431:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  432:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  433:	}
        -:  434:
        -:  435:	//score from discard
    #####:  436:	for (i = 0; i < state->discardCount[player]; i++)
        -:  437:	{
    #####:  438:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  439:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  441:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  442:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  443:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  444:	}
        -:  445:
        -:  446:	//score from deck
    #####:  447:	for (i = 0; i < state->discardCount[player]; i++)
        -:  448:	{
    #####:  449:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  450:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  452:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  453:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  454:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  455:	}
        -:  456:
    #####:  457:	return score;
        -:  458:}
        -:  459:
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:	int i;
        -:  462:	int j;
        -:  463:	int highScore;
        -:  464:	int currentPlayer;
        -:  465:
        -:  466:	//get score for each player
    #####:  467:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  468:	{
        -:  469:		//set unused player scores to -9999
    #####:  470:		if (i >= state->numPlayers)
        -:  471:		{
    #####:  472:			players[i] = -9999;
        -:  473:		}
        -:  474:		else
        -:  475:		{
    #####:  476:			players[i] = scoreFor(i, state);
        -:  477:		}
        -:  478:	}
        -:  479:
        -:  480:	//find highest score
    #####:  481:	j = 0;
    #####:  482:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  483:	{
    #####:  484:		if (players[i] > players[j])
        -:  485:		{
    #####:  486:			j = i;
        -:  487:		}
        -:  488:	}
    #####:  489:	highScore = players[j];
        -:  490:
        -:  491:	//add 1 to players who had less turns
    #####:  492:	currentPlayer = whoseTurn(state);
    #####:  493:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:	{
    #####:  495:		if (players[i] == highScore && i > currentPlayer)
        -:  496:		{
    #####:  497:			players[i]++;
        -:  498:		}
        -:  499:	}
        -:  500:
        -:  501:	//find new highest score
    #####:  502:	j = 0;
    #####:  503:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:	{
    #####:  505:		if (players[i] > players[j])
        -:  506:		{
    #####:  507:			j = i;
        -:  508:		}
        -:  509:	}
    #####:  510:	highScore = players[j];
        -:  511:
        -:  512:	//set winners in array to 1 and rest to 0
    #####:  513:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:	{
    #####:  515:		if (players[i] == highScore)
        -:  516:		{
    #####:  517:			players[i] = 1;
        -:  518:		}
        -:  519:		else
        -:  520:		{
    #####:  521:			players[i] = 0;
        -:  522:		}
        -:  523:	}
        -:  524:
    #####:  525:	return 0;
        -:  526:}
        -:  527:
    20000:  528:int drawCard(int player, struct gameState *state)
        -:  529:{
        -:  530:	int count;
        -:  531:	int deckCounter;
    20000:  532:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  533:
        -:  534:													//Step 1 Shuffle the discard pile back into a deck
        -:  535:		int i;
        -:  536:		//Move discard to deck
     7622:  537:		for (i = 0; i < state->discardCount[player]; i++) {
     7590:  538:			state->deck[player][i] = state->discard[player][i];
     7590:  539:			state->discard[player][i] = -1;
        -:  540:		}
        -:  541:
       32:  542:		state->deckCount[player] = state->discardCount[player];
       32:  543:		state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:												  //Shufffle the deck
       32:  546:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:
        -:  548:		if (DEBUG) {//Debug statements
        -:  549:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:		}
        -:  551:
       32:  552:		state->discardCount[player] = 0;
        -:  553:
        -:  554:		//Step 2 Draw Card
       32:  555:		count = state->handCount[player];//Get current player's hand count
        -:  556:
        -:  557:		if (DEBUG) {//Debug statements
        -:  558:			printf("Current hand count: %d\n", count);
        -:  559:		}
        -:  560:
       32:  561:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
       32:  563:		if (deckCounter == 0)
    #####:  564:			return -1;
        -:  565:
       32:  566:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       32:  567:		state->deckCount[player]--;
       32:  568:		state->handCount[player]++;//Increment hand count
        -:  569:	}
        -:  570:
        -:  571:	else {
    19968:  572:		int count = state->handCount[player];//Get current hand count for player
        -:  573:		int deckCounter;
        -:  574:		if (DEBUG) {//Debug statements
        -:  575:			printf("Current hand count: %d\n", count);
        -:  576:		}
        -:  577:
    19968:  578:		deckCounter = state->deckCount[player];//Create holder for the deck count
    19968:  579:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    19968:  580:		state->deckCount[player]--;
    19968:  581:		state->handCount[player]++;//Increment hand count
        -:  582:	}
        -:  583:
    20000:  584:	return 0;
        -:  585:}
        -:  586:
    #####:  587:int getCost(int cardNumber)
        -:  588:{
    #####:  589:	switch (cardNumber)
        -:  590:	{
        -:  591:	case curse:
    #####:  592:		return 0;
        -:  593:	case estate:
    #####:  594:		return 2;
        -:  595:	case duchy:
    #####:  596:		return 5;
        -:  597:	case province:
    #####:  598:		return 8;
        -:  599:	case copper:
    #####:  600:		return 0;
        -:  601:	case silver:
    #####:  602:		return 3;
        -:  603:	case gold:
    #####:  604:		return 6;
        -:  605:	case adventurer:
    #####:  606:		return 6;
        -:  607:	case council_room:
    #####:  608:		return 5;
        -:  609:	case feast:
    #####:  610:		return 4;
        -:  611:	case gardens:
    #####:  612:		return 4;
        -:  613:	case mine:
    #####:  614:		return 5;
        -:  615:	case remodel:
    #####:  616:		return 4;
        -:  617:	case smithy:
    #####:  618:		return 4;
        -:  619:	case village:
    #####:  620:		return 3;
        -:  621:	case baron:
    #####:  622:		return 4;
        -:  623:	case great_hall:
    #####:  624:		return 3;
        -:  625:	case minion:
    #####:  626:		return 5;
        -:  627:	case steward:
    #####:  628:		return 3;
        -:  629:	case tribute:
    #####:  630:		return 5;
        -:  631:	case ambassador:
    #####:  632:		return 3;
        -:  633:	case cutpurse:
    #####:  634:		return 4;
        -:  635:	case embargo:
    #####:  636:		return 2;
        -:  637:	case outpost:
    #####:  638:		return 5;
        -:  639:	case salvager:
    #####:  640:		return 4;
        -:  641:	case sea_hag:
    #####:  642:		return 4;
        -:  643:	case treasure_map:
    #####:  644:		return 4;
        -:  645:	}
        -:  646:
    #####:  647:	return -1;
        -:  648:}
        -:  649:
        -:  650:// Helper Methods - Cards Function
        -:  651:
    #####:  652:void adventureCard(int currentPlayer, int z, int temphand[], struct gameState *state) {
        -:  653:
    #####:  654:	int drawntreasure = 0;
        -:  655:	int cardDrawn;
        -:  656:
        -:  657:	// ** Bug #1: Changed from 2 to 3
    #####:  658:	while (drawntreasure<3) {
    #####:  659:		if (state->deckCount[currentPlayer] <1) {
        -:  660:			//if the deck is empty we need to shuffle discard and add to deck
    #####:  661:			shuffle(currentPlayer, state);
        -:  662:		}
    #####:  663:		drawCard(currentPlayer, state);
    #####:  664:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        -:  665:		//top card of hand is most recently drawn card.
    #####:  666:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  667:			drawntreasure++;
        -:  668:		else {
    #####:  669:			temphand[z] = cardDrawn;
        -:  670:			//this should just remove the top card (the most recently drawn one).
    #####:  671:			state->handCount[currentPlayer]--;
    #####:  672:			z++;
        -:  673:		}
        -:  674:	}
    #####:  675:	while (z - 1 >= 0) {
        -:  676:		// discard all cards in play that have been drawn
    #####:  677:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
    #####:  678:		z = z - 1;
        -:  679:	}
    #####:  680:}
        -:  681:
    #####:  682:void councilRoomCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  683:	int i;
        -:  684:	//+4 Cards
    #####:  685:	for (i = 0; i < 4; i++)
        -:  686:	{
    #####:  687:		drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:
        -:  690:	//+1 Buy
    #####:  691:	state->numBuys++;
        -:  692:
        -:  693:	//Each other player draws a card
    #####:  694:	for (i = 0; i < state->numPlayers; i++)
        -:  695:	{
    #####:  696:		if (i != currentPlayer)
        -:  697:		{
    #####:  698:			drawCard(i, state);
        -:  699:		}
        -:  700:	}
        -:  701:
        -:  702:	//put played card in played card pile
    #####:  703:	discardCard(handPos, currentPlayer, state, 0);
        -:  704:
    #####:  705:}
        -:  706:
    #####:  707:void feastCard(int currentPlayer, int choice1, int temphand[], struct gameState *state) {
        -:  708:	int i;
        -:  709:	int x;
        -:  710:	//gain card with cost up to 5
        -:  711:	//Backup hand
    #####:  712:	for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  713:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  714:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  715:	}
        -:  716:	//Backup hand
        -:  717:
        -:  718:	//Update Coins for Buy
        -:  719:	// Bug #2: Change the bonus coin from 5 to 7
    #####:  720:	updateCoins(currentPlayer, state, 7);
    #####:  721:	x = 1;//Condition to loop on
    #####:  722:	while (x == 1) {//Buy one card
    #####:  723:		if (supplyCount(choice1, state) <= 0) {
        -:  724:			if (DEBUG)
        -:  725:				printf("None of that card left, sorry!\n");
        -:  726:
        -:  727:			if (DEBUG) {
        -:  728:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  729:			}
        -:  730:		}
    #####:  731:		else if (state->coins < getCost(choice1)) {
    #####:  732:			printf("That card is too expensive!\n");
        -:  733:
        -:  734:			if (DEBUG) {
        -:  735:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  736:			}
        -:  737:		}
        -:  738:		else {
        -:  739:
        -:  740:			if (DEBUG) {
        -:  741:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  742:			}
        -:  743:
    #####:  744:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  745:			x = 0;//No more buying cards
        -:  746:
        -:  747:			if (DEBUG) {
        -:  748:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  749:			}
        -:  750:
        -:  751:		}
        -:  752:	}
        -:  753:
        -:  754:	//Reset Hand
    #####:  755:	for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  756:		state->hand[currentPlayer][i] = temphand[i];
    #####:  757:		temphand[i] = -1;
        -:  758:	}
        -:  759:	//Reset Hand
    #####:  760:}
        -:  761:
    #####:  762:void smithyCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  763:	int i;
        -:  764:	//+3 Cards
        -:  765:	// ** Bug #3: Change 3 to 2 (reducing it to +2 cards)
    #####:  766:	for (i = 0; i < 2; i++)
        -:  767:	{
    #####:  768:		drawCard(currentPlayer, state);
        -:  769:	}
        -:  770:
        -:  771:	//discard card from hand
    #####:  772:	discardCard(handPos, currentPlayer, state, 0);
    #####:  773:}
        -:  774:
    10000:  775:void villageCard(int currentPlayer, int handPos, struct gameState *state) {
        -:  776:	//+1 Card
    10000:  777:	drawCard(currentPlayer, state);
        -:  778:
        -:  779:	//+2 Actions
        -:  780:	// ** Bug #4: Change the +2 actions to +4
    10000:  781:	state->numActions = state->numActions + 4;
        -:  782:
        -:  783:	//discard played card from hand
    10000:  784:	discardCard(handPos, currentPlayer, state, 0);
    10000:  785:}
        -:  786:
    10000:  787:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  788:{
        -:  789:	int i;
        -:  790:	int j;
        -:  791:	int k;
        -:  792:
        -:  793:	int index;
    10000:  794:	int currentPlayer = whoseTurn(state);
    10000:  795:	int nextPlayer = currentPlayer + 1;
        -:  796:
    10000:  797:	int tributeRevealedCards[2] = { -1, -1 };
        -:  798:	int temphand[MAX_HAND];// moved above the if statement
        -:  799:
    10000:  800:	int z = 0;// this is the counter for the temp hand
    10000:  801:	if (nextPlayer > (state->numPlayers - 1)) {
     5014:  802:		nextPlayer = 0;
        -:  803:	}
        -:  804:
        -:  805:
        -:  806:	//uses switch to select card and perform actions
    10000:  807:	switch (card)
        -:  808:	{
        -:  809:	case adventurer:
    #####:  810:		adventureCard(currentPlayer, z, temphand, state);
    #####:  811:		return 0;
        -:  812:
        -:  813:	case council_room:
    #####:  814:		councilRoomCard(currentPlayer, handPos, state);
    #####:  815:		return 0;
        -:  816:
        -:  817:	case feast:
    #####:  818:		feastCard(currentPlayer, choice1, temphand, state);
    #####:  819:		return 0;
        -:  820:
        -:  821:	case gardens:
    #####:  822:		return -1;
        -:  823:
        -:  824:	case mine:
    #####:  825:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  826:
    #####:  827:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  828:		{
    #####:  829:			return -1;
        -:  830:		}
        -:  831:
    #####:  832:		if (choice2 > treasure_map || choice2 < curse)
        -:  833:		{
    #####:  834:			return -1;
        -:  835:		}
        -:  836:
    #####:  837:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  838:		{
    #####:  839:			return -1;
        -:  840:		}
        -:  841:
    #####:  842:		gainCard(choice2, state, 2, currentPlayer);
        -:  843:
        -:  844:		//discard card from hand
    #####:  845:		discardCard(handPos, currentPlayer, state, 0);
        -:  846:
        -:  847:		//discard trashed card
    #####:  848:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  849:		{
    #####:  850:			if (state->hand[currentPlayer][i] == j)
        -:  851:			{
    #####:  852:				discardCard(i, currentPlayer, state, 0);
    #####:  853:				break;
        -:  854:			}
        -:  855:		}
        -:  856:
    #####:  857:		return 0;
        -:  858:
        -:  859:	case remodel:
    #####:  860:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  861:
    #####:  862:		if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  863:		{
    #####:  864:			return -1;
        -:  865:		}
        -:  866:
    #####:  867:		gainCard(choice2, state, 0, currentPlayer);
        -:  868:
        -:  869:		//discard card from hand
    #####:  870:		discardCard(handPos, currentPlayer, state, 0);
        -:  871:
        -:  872:		//discard trashed card
    #####:  873:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  874:		{
    #####:  875:			if (state->hand[currentPlayer][i] == j)
        -:  876:			{
    #####:  877:				discardCard(i, currentPlayer, state, 0);
    #####:  878:				break;
        -:  879:			}
        -:  880:		}
        -:  881:
        -:  882:
    #####:  883:		return 0;
        -:  884:
        -:  885:	case smithy:
    #####:  886:		smithyCard(currentPlayer, handPos, state);
    #####:  887:		return 0;
        -:  888:
        -:  889:	case village:
    10000:  890:		villageCard(currentPlayer, handPos, state);
    10000:  891:		return 0;
        -:  892:
        -:  893:	case baron:
    #####:  894:		state->numBuys++;//Increase buys by 1!
    #####:  895:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####:  896:			int p = 0;//Iterator for hand!
    #####:  897:			int card_not_discarded = 1;//Flag for discard set!
    #####:  898:			while (card_not_discarded) {
    #####:  899:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####:  900:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:					state->discardCount[currentPlayer]++;
    #####:  903:					for (; p < state->handCount[currentPlayer]; p++) {
    #####:  904:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  905:					}
    #####:  906:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:					state->handCount[currentPlayer]--;
    #####:  908:					card_not_discarded = 0;//Exit the loop
        -:  909:				}
    #####:  910:				else if (p > state->handCount[currentPlayer]) {
        -:  911:					if (DEBUG) {
        -:  912:						printf("No estate cards in your hand, invalid choice\n");
        -:  913:						printf("Must gain an estate if there are any\n");
        -:  914:					}
    #####:  915:					if (supplyCount(estate, state) > 0) {
    #####:  916:						gainCard(estate, state, 0, currentPlayer);
    #####:  917:						state->supplyCount[estate]--;//Decrement estates
    #####:  918:						if (supplyCount(estate, state) == 0) {
    #####:  919:							isGameOver(state);
        -:  920:						}
        -:  921:					}
    #####:  922:					card_not_discarded = 0;//Exit the loop
        -:  923:				}
        -:  924:
        -:  925:				else {
    #####:  926:					p++;//Next card
        -:  927:				}
        -:  928:			}
        -:  929:		}
        -:  930:
        -:  931:		else {
    #####:  932:			if (supplyCount(estate, state) > 0) {
    #####:  933:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  934:				state->supplyCount[estate]--;//Decrement Estates
    #####:  935:				if (supplyCount(estate, state) == 0) {
    #####:  936:					isGameOver(state);
        -:  937:				}
        -:  938:			}
        -:  939:		}
        -:  940:
        -:  941:
    #####:  942:		return 0;
        -:  943:
        -:  944:	case great_hall:
        -:  945:		//+1 Card
    #####:  946:		drawCard(currentPlayer, state);
        -:  947:
        -:  948:		//+1 Actions
    #####:  949:		state->numActions++;
        -:  950:
        -:  951:		//discard card from hand
    #####:  952:		discardCard(handPos, currentPlayer, state, 0);
    #####:  953:		return 0;
        -:  954:
        -:  955:	case minion:
        -:  956:		//+1 action
    #####:  957:		state->numActions++;
        -:  958:
        -:  959:		//discard card from hand
    #####:  960:		discardCard(handPos, currentPlayer, state, 0);
        -:  961:
    #####:  962:		if (choice1)		//+2 coins
        -:  963:		{
    #####:  964:			state->coins = state->coins + 2;
        -:  965:		}
        -:  966:
    #####:  967:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  968:		{
        -:  969:			//discard hand
    #####:  970:			while (numHandCards(state) > 0)
        -:  971:			{
    #####:  972:				discardCard(handPos, currentPlayer, state, 0);
        -:  973:			}
        -:  974:
        -:  975:			//draw 4
    #####:  976:			for (i = 0; i < 4; i++)
        -:  977:			{
    #####:  978:				drawCard(currentPlayer, state);
        -:  979:			}
        -:  980:
        -:  981:			//other players discard hand and redraw if hand size > 4
    #####:  982:			for (i = 0; i < state->numPlayers; i++)
        -:  983:			{
    #####:  984:				if (i != currentPlayer)
        -:  985:				{
    #####:  986:					if (state->handCount[i] > 4)
        -:  987:					{
        -:  988:						//discard hand
    #####:  989:						while (state->handCount[i] > 0)
        -:  990:						{
    #####:  991:							discardCard(handPos, i, state, 0);
        -:  992:						}
        -:  993:
        -:  994:						//draw 4
    #####:  995:						for (j = 0; j < 4; j++)
        -:  996:						{
    #####:  997:							drawCard(i, state);
        -:  998:						}
        -:  999:					}
        -: 1000:				}
        -: 1001:			}
        -: 1002:
        -: 1003:		}
    #####: 1004:		return 0;
        -: 1005:
        -: 1006:	case steward:
    #####: 1007:		if (choice1 == 1)
        -: 1008:		{
        -: 1009:			//+2 cards
    #####: 1010:			drawCard(currentPlayer, state);
    #####: 1011:			drawCard(currentPlayer, state);
        -: 1012:		}
    #####: 1013:		else if (choice1 == 2)
        -: 1014:		{
        -: 1015:			//+2 coins
    #####: 1016:			state->coins = state->coins + 2;
        -: 1017:		}
        -: 1018:		else
        -: 1019:		{
        -: 1020:			//trash 2 cards in hand
    #####: 1021:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1022:			discardCard(choice3, currentPlayer, state, 1);
        -: 1023:		}
        -: 1024:
        -: 1025:		//discard card from hand
    #####: 1026:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:		return 0;
        -: 1028:
        -: 1029:	case tribute:
    #####: 1030:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1031:			if (state->deckCount[nextPlayer] > 0) {
    #####: 1032:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1033:				state->deckCount[nextPlayer]--;
        -: 1034:			}
    #####: 1035:			else if (state->discardCount[nextPlayer] > 0) {
    #####: 1036:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1037:				state->discardCount[nextPlayer]--;
        -: 1038:			}
        -: 1039:			else {
        -: 1040:				//No Card to Reveal
        -: 1041:				if (DEBUG) {
        -: 1042:					printf("No cards to reveal\n");
        -: 1043:				}
        -: 1044:			}
        -: 1045:		}
        -: 1046:
        -: 1047:		else {
    #####: 1048:			if (state->deckCount[nextPlayer] == 0) {
    #####: 1049:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1050:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:					state->deckCount[nextPlayer]++;
    #####: 1052:					state->discard[nextPlayer][i] = -1;
    #####: 1053:					state->discardCount[nextPlayer]--;
        -: 1054:				}
        -: 1055:
    #####: 1056:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1057:			}
    #####: 1058:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1059:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:			state->deckCount[nextPlayer]--;
    #####: 1061:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1062:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:			state->deckCount[nextPlayer]--;
        -: 1064:		}
        -: 1065:
    #####: 1066:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
    #####: 1067:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:			state->playedCardCount++;
    #####: 1069:			tributeRevealedCards[1] = -1;
        -: 1070:		}
        -: 1071:
    #####: 1072:		for (i = 0; i <= 2; i++) {
    #####: 1073:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1074:				state->coins += 2;
        -: 1075:			}
        -: 1076:
    #####: 1077:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1078:				drawCard(currentPlayer, state);
    #####: 1079:				drawCard(currentPlayer, state);
        -: 1080:			}
        -: 1081:			else {//Action Card
    #####: 1082:				state->numActions = state->numActions + 2;
        -: 1083:			}
        -: 1084:		}
        -: 1085:
    #####: 1086:		return 0;
        -: 1087:
        -: 1088:	case ambassador:
    #####: 1089:		j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:		if (choice2 > 2 || choice2 < 0)
        -: 1092:		{
    #####: 1093:			return -1;
        -: 1094:		}
        -: 1095:
    #####: 1096:		if (choice1 == handPos)
        -: 1097:		{
    #####: 1098:			return -1;
        -: 1099:		}
        -: 1100:
    #####: 1101:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:		{
    #####: 1103:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1104:			{
    #####: 1105:				j++;
        -: 1106:			}
        -: 1107:		}
    #####: 1108:		if (j < choice2)
        -: 1109:		{
    #####: 1110:			return -1;
        -: 1111:		}
        -: 1112:
        -: 1113:		if (DEBUG)
        -: 1114:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:		//increase supply count for choosen card by amount being discarded
    #####: 1117:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:		//each other player gains a copy of revealed card
    #####: 1120:		for (i = 0; i < state->numPlayers; i++)
        -: 1121:		{
    #####: 1122:			if (i != currentPlayer)
        -: 1123:			{
    #####: 1124:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1125:			}
        -: 1126:		}
        -: 1127:
        -: 1128:		//discard played card from hand
    #####: 1129:		discardCard(handPos, currentPlayer, state, 0);
        -: 1130:
        -: 1131:		//trash copies of cards returned to supply
    #####: 1132:		for (j = 0; j < choice2; j++)
        -: 1133:		{
    #####: 1134:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:			{
    #####: 1136:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1137:				{
    #####: 1138:					discardCard(i, currentPlayer, state, 1);
    #####: 1139:					break;
        -: 1140:				}
        -: 1141:			}
        -: 1142:		}
        -: 1143:
    #####: 1144:		return 0;
        -: 1145:
        -: 1146:	case cutpurse:
        -: 1147:
    #####: 1148:		updateCoins(currentPlayer, state, 2);
    #####: 1149:		for (i = 0; i < state->numPlayers; i++)
        -: 1150:		{
    #####: 1151:			if (i != currentPlayer)
        -: 1152:			{
    #####: 1153:				for (j = 0; j < state->handCount[i]; j++)
        -: 1154:				{
    #####: 1155:					if (state->hand[i][j] == copper)
        -: 1156:					{
    #####: 1157:						discardCard(j, i, state, 0);
    #####: 1158:						break;
        -: 1159:					}
    #####: 1160:					if (j == state->handCount[i])
        -: 1161:					{
    #####: 1162:						for (k = 0; k < state->handCount[i]; k++)
        -: 1163:						{
        -: 1164:							if (DEBUG)
        -: 1165:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:						}
    #####: 1167:						break;
        -: 1168:					}
        -: 1169:				}
        -: 1170:
        -: 1171:			}
        -: 1172:
        -: 1173:		}
        -: 1174:
        -: 1175:		//discard played card from hand
    #####: 1176:		discardCard(handPos, currentPlayer, state, 0);
        -: 1177:
    #####: 1178:		return 0;
        -: 1179:
        -: 1180:
        -: 1181:	case embargo:
        -: 1182:		//+2 Coins
    #####: 1183:		state->coins = state->coins + 2;
        -: 1184:
        -: 1185:		//see if selected pile is in play
    #####: 1186:		if (state->supplyCount[choice1] == -1)
        -: 1187:		{
    #####: 1188:			return -1;
        -: 1189:		}
        -: 1190:
        -: 1191:		//add embargo token to selected supply pile
    #####: 1192:		state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:		//trash card
    #####: 1195:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1196:		return 0;
        -: 1197:
        -: 1198:	case outpost:
        -: 1199:		//set outpost flag
    #####: 1200:		state->outpostPlayed++;
        -: 1201:
        -: 1202:		//discard card
    #####: 1203:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:		return 0;
        -: 1205:
        -: 1206:	case salvager:
        -: 1207:		//+1 buy
    #####: 1208:		state->numBuys++;
        -: 1209:
    #####: 1210:		if (choice1)
        -: 1211:		{
        -: 1212:			//gain coins equal to trashed card
    #####: 1213:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1214:			//trash card
    #####: 1215:			discardCard(choice1, currentPlayer, state, 1);
        -: 1216:		}
        -: 1217:
        -: 1218:		//discard card
    #####: 1219:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:		return 0;
        -: 1221:
        -: 1222:	case sea_hag:
    #####: 1223:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1224:			if (i != currentPlayer) {
    #####: 1225:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:				state->discardCount[i]++;
    #####: 1227:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1228:			}
        -: 1229:		}
    #####: 1230:		return 0;
        -: 1231:
        -: 1232:	case treasure_map:
        -: 1233:		//search hand for another treasure_map
    #####: 1234:		index = -1;
    #####: 1235:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:		{
    #####: 1237:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1238:			{
    #####: 1239:				index = i;
    #####: 1240:				break;
        -: 1241:			}
        -: 1242:		}
    #####: 1243:		if (index > -1)
        -: 1244:		{
        -: 1245:			//trash both treasure cards
    #####: 1246:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1247:			discardCard(index, currentPlayer, state, 1);
        -: 1248:
        -: 1249:			//gain 4 Gold cards
    #####: 1250:			for (i = 0; i < 4; i++)
        -: 1251:			{
    #####: 1252:				gainCard(gold, state, 1, currentPlayer);
        -: 1253:			}
        -: 1254:
        -: 1255:			//return success
    #####: 1256:			return 1;
        -: 1257:		}
        -: 1258:
        -: 1259:		//no second treasure_map found in hand
    #####: 1260:		return -1;
        -: 1261:	}
        -: 1262:
    #####: 1263:	return -1;
        -: 1264:}
        -: 1265:
    20000: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:
        -: 1269:	//if card is not trashed, added to Played pile 
    20000: 1270:	if (trashFlag < 1)
        -: 1271:	{
        -: 1272:		//add card to played pile
    20000: 1273:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    20000: 1274:		state->playedCardCount++;
        -: 1275:	}
        -: 1276:
        -: 1277:	//set played card to -1
    20000: 1278:	state->hand[currentPlayer][handPos] = -1;
        -: 1279:
        -: 1280:	//remove card from player's hand
    20000: 1281:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1282:	{
        -: 1283:		//reduce number of cards in hand
       32: 1284:		state->handCount[currentPlayer]--;
        -: 1285:	}
    19968: 1286:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1287:	{
        -: 1288:		//reduce number of cards in hand
    #####: 1289:		state->handCount[currentPlayer]--;
        -: 1290:	}
        -: 1291:	else
        -: 1292:	{
        -: 1293:		//replace discarded card with last card in hand
    19968: 1294:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1295:		//set last card to -1
    19968: 1296:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:		//reduce number of cards in hand
    19968: 1298:		state->handCount[currentPlayer]--;
        -: 1299:	}
        -: 1300:
    20000: 1301:	return 0;
        -: 1302:}
        -: 1303:
    #####: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1305:{
        -: 1306:	//Note: supplyPos is enum of choosen card
        -: 1307:
        -: 1308:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1309:	if (supplyCount(supplyPos, state) < 1)
        -: 1310:	{
    #####: 1311:		return -1;
        -: 1312:	}
        -: 1313:
        -: 1314:	//added card for [whoseTurn] current player:
        -: 1315:	// toFlag = 0 : add to discard
        -: 1316:	// toFlag = 1 : add to deck
        -: 1317:	// toFlag = 2 : add to hand
        -: 1318:
    #####: 1319:	if (toFlag == 1)
        -: 1320:	{
    #####: 1321:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1322:		state->deckCount[player]++;
        -: 1323:	}
    #####: 1324:	else if (toFlag == 2)
        -: 1325:	{
    #####: 1326:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1327:		state->handCount[player]++;
        -: 1328:	}
        -: 1329:	else
        -: 1330:	{
    #####: 1331:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1332:		state->discardCount[player]++;
        -: 1333:	}
        -: 1334:
        -: 1335:	//decrease number in supply pile
    #####: 1336:	state->supplyCount[supplyPos]--;
        -: 1337:
    #####: 1338:	return 0;
        -: 1339:}
        -: 1340:
    #####: 1341:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1342:{
        -: 1343:	int i;
        -: 1344:
        -: 1345:	//reset coin count
    #####: 1346:	state->coins = 0;
        -: 1347:
        -: 1348:	//add coins for each Treasure card in player's hand
    #####: 1349:	for (i = 0; i < state->handCount[player]; i++)
        -: 1350:	{
    #####: 1351:		if (state->hand[player][i] == copper)
        -: 1352:		{
    #####: 1353:			state->coins += 1;
        -: 1354:		}
    #####: 1355:		else if (state->hand[player][i] == silver)
        -: 1356:		{
    #####: 1357:			state->coins += 2;
        -: 1358:		}
    #####: 1359:		else if (state->hand[player][i] == gold)
        -: 1360:		{
    #####: 1361:			state->coins += 3;
        -: 1362:		}
        -: 1363:	}
        -: 1364:
        -: 1365:	//add bonus
    #####: 1366:	state->coins += bonus;
        -: 1367:
    #####: 1368:	return 0;
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372:
        -: 1373:
        -: 1374://end of dominion.c
